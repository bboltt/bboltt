import optuna
from pyspark.ml.classification import GBTClassifier
from pyspark.ml.evaluation import BinaryClassificationEvaluator

# Objective function for Optuna with early stopping
def objective(trial):
    # Define hyperparameter space
    max_depth = trial.suggest_int("maxDepth", 3, 10)
    min_instances_per_node = trial.suggest_int("minInstancesPerNode", 10, 200)
    step_size = trial.suggest_loguniform("stepSize", 0.01, 0.2)
    max_bins = trial.suggest_categorical("maxBins", [64, 128, 256])
    subsampling_rate = trial.suggest_float("subsamplingRate", 0.5, 1.0)

    # Define the GBTClassifier
    rf = GBTClassifier(
        labelCol="label",
        featuresCol="features",
        maxDepth=max_depth,
        minInstancesPerNode=min_instances_per_node,
        stepSize=step_size,
        maxBins=max_bins,
        subsamplingRate=subsampling_rate,
        seed=22
    )

    # Early stopping variables
    max_iter = 100  # Maximum number of iterations (trees)
    patience = 5    # Number of iterations without improvement before stopping
    best_auc = 0.0
    no_improvement_counter = 0

    for iter_step in range(1, max_iter + 1):
        # Train the model incrementally
        rf.setMaxIter(iter_step)  # Set the number of iterations
        rf_model = rf.fit(train_data)

        # Evaluate on the validation set
        rf_pred_val = rf_model.transform(val_data)
        evaluator = BinaryClassificationEvaluator(labelCol="label", metricName="areaUnderROC")
        auc_val = evaluator.evaluate(rf_pred_val)

        # Report the intermediate result to Optuna
        trial.report(auc_val, step=iter_step)

        # Check if trial should be pruned
        if trial.should_prune():
            raise optuna.exceptions.TrialPruned()

        # Early stopping logic
        if auc_val > best_auc:
            best_auc = auc_val
            no_improvement_counter = 0
        else:
            no_improvement_counter += 1

        if no_improvement_counter >= patience:
            print(f"Early stopping triggered at iteration {iter_step}")
            break

    # Return the best AUC score achieved
    return best_auc

# Define Optuna study with a pruner
study = optuna.create_study(direction="maximize", pruner=optuna.pruners.MedianPruner())
study.optimize(objective, n_trials=50)

# Best trial
print("Best trial:")
print(study.best_trial)




